name: Go

on:
  push:
    branches: [ "main" ]

jobs:

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Get version
      id: get_version
      shell: bash
      run: echo "::set-output name=VERSION::$(grep '_VERSION' main.go | cut -d'"' -f2)"

    - name: Check if tag exists
      id: check_tag
      shell: bash
      run: |
        if git rev-parse "v${{ steps.get_version.outputs.VERSION }}" >/dev/null 2>&1; then
          echo "::set-output name=EXISTS::true"
        else
          echo "::set-output name=EXISTS::false"
        fi

    - name: Build
      if: steps.check_tag.outputs.EXISTS == 'false'
      shell: bash
      run: go build -v -o Iridescence-${{ steps.get_version.outputs.VERSION }} ./...

    - name: Test
      if: steps.check_tag.outputs.EXISTS == 'false'
      shell: bash
      run: go test -v ./...

    - name: Create Release
      id: create_release
      if: steps.check_tag.outputs.EXISTS == 'false' && matrix.os == 'ubuntu-latest'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.VERSION }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: steps.check_tag.outputs.EXISTS == 'false'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./Iridescence-${{ steps.get_version.outputs.VERSION }}
        asset_name: Iridescence-${{ steps.get_version.outputs.VERSION }}-${{ matrix.os }}
        asset_content_type: application/octet-stream
